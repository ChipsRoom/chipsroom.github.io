<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Custom Password Manager</title>
    <style>
        body {
            font-family: 'Poppins', sans-serif;
            display: flex;
            justify-content: center;
            align-items: center;
            height: 100vh;
            margin: 0;
            background: linear-gradient(135deg, #1d2b64 0%, #f8cdda 100%);
            background-repeat: no-repeat;
            background-attachment: fixed;
        }

        #app {
            width: 100%;
            max-width: 400px;
            background: rgba(255, 255, 255, 0.9);
            padding: 40px;
            border-radius: 16px;
            box-shadow: 0 20px 40px rgba(0, 0, 0, 0.1);
            transition: transform 0.3s, box-shadow 0.3s;
        }

        #app:hover {
            transform: translateY(-10px);
            box-shadow: 0 30px 60px rgba(0, 0, 0, 0.2);
        }

        h2 {
            text-align: center;
            color: #333;
            margin-bottom: 30px;
            font-size: 24px;
        }

        input {
            width: 100%;
            padding: 15px;
            margin: 10px 0;
            border: 1px solid #ddd;
            border-radius: 8px;
            background-color: #fafafa;
            font-size: 14px;
            transition: border 0.3s ease;
        }

        input:focus {
            outline: none;
            border-color: #7b2ff7;
            box-shadow: 0 0 5px rgba(123, 47, 247, 0.4);
        }

        button {
            width: 100%;
            padding: 15px;
            margin: 15px 0;
            border: none;
            border-radius: 8px;
            background: linear-gradient(135deg, #7b2ff7 0%, #f107a3 100%);
            color: #fff;
            font-size: 14px;
            font-weight: bold;
            cursor: pointer;
            transition: background 0.3s, transform 0.3s;
        }

        button:hover {
            transform: translateY(-3px);
            background: linear-gradient(135deg, #7b2ff7 0%, #ff0863 100%);
        }

        .toggle-link {
            text-align: center;
            margin-top: 10px;
            color: #7b2ff7;
            font-weight: 500;
            cursor: pointer;
            transition: color 0.3s;
        }

        .toggle-link:hover {
            color: #f107a3;
        }

        #error-message {
            color: red;
            font-size: 14px;
            text-align: center;
            margin: 10px 0;
            display: none;
        }

        #password-section {
            display: none;
            margin-top: 30px;
        }

        .password-list {
            margin-top: 20px;
        }

        .password-item {
            background: #f1f3f6;
            padding: 12px;
            margin: 10px 0;
            border-radius: 8px;
            border-left: 4px solid #7b2ff7;
            font-size: 14px;
        }

        /* Custom console styles */
        #custom-console {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0, 0, 0, 0.8);
            color: #fff;
            display: none;
            padding: 20px;
            overflow-y: auto;
            z-index: 9999;
        }

        #console-output {
            white-space: pre-wrap; /* Preserve whitespace */
            font-family: 'Courier New', monospace;
            margin-bottom: 20px;
        }

        .close-console {
            background: #f107a3;
            border: none;
            padding: 10px 15px;
            color: #fff;
            border-radius: 5px;
            cursor: pointer;
        }

        @media (max-width: 480px) {
            #app {
                padding: 20px;
            }
        }
    </style>
</head>
<body>

<div id="app">
    <h2 id="form-title">Login</h2>
    <div id="error-message"></div> <!-- Error message display -->

    <div id="login-section">
        <input type="text" id="login-username" placeholder="Username" required>
        <input type="password" id="login-password" placeholder="Password" required>
        <button onclick="login()">Login</button>
        <div class="toggle-link" onclick="showSignUp()">Don't have an account? Sign up</div>
    </div>

    <div id="signup-section" style="display:none;">
        <input type="text" id="signup-username" placeholder="Username" required>
        <input type="password" id="signup-password" placeholder="Password" required>
        <button onclick="signUp()">Sign Up</button>
        <div class="toggle-link" onclick="showLogin()">Already have an account? Login</div>
    </div>

    <div id="password-section">
        <input type="text" id="site" placeholder="Site Name" required>
        <input type="password" id="site-password" placeholder="Site Password" required>
        <button onclick="savePassword()">Save Password</button>
        <div class="password-list" id="password-list"></div>
    </div>

    <!-- Button to open the custom console -->
    <button onclick="showConsole()">Show Console</button>
</div>

<!-- Custom Console -->
<div id="custom-console">
    <div id="console-output"></div>
    <button class="close-console" onclick="closeConsole()">Close Console</button>
</div>

<!-- Firebase SDK -->
<script src="https://www.gstatic.com/firebasejs/9.24.0/firebase-app.js"></script>
<script src="https://www.gstatic.com/firebasejs/9.24.0/firebase-database.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/bcryptjs/2.4.3/bcrypt.min.js"></script>

<script>
    // Firebase configuration for 'chips-chatroom'
    const firebaseConfig = {
        apiKey: "AIzaSyDrP5XEIuyegP2_3CpD0RpJhk8GATej0",
        authDomain: "chips-chatroom.firebaseapp.com",
        projectId: "chips-chatroom",
        storageBucket: "chips-chatroom.appspot.com",
        messagingSenderId: "334241418918",
        appId: "1:334241418918:web:ca6e37ed8f54bd49ceee67",
        measurementId: "G-NKCQLZ9LFF"
    };

    // Initialize Firebase
    const app = firebase.initializeApp(firebaseConfig);
    const database = firebase.database();

    // Show Sign-Up page
    const showSignUp = () => {
        document.getElementById('login-section').style.display = 'none';
        document.getElementById('signup-section').style.display = 'block';
        document.getElementById('form-title').textContent = 'Sign Up';
        clearError();
    };

    // Show Login page
    const showLogin = () => {
        document.getElementById('signup-section').style.display = 'none';
        document.getElementById('login-section').style.display = 'block';
        document.getElementById('form-title').textContent = 'Login';
        clearError();
    };

    // Clear error message
    const clearError = () => {
        const errorMessageDiv = document.getElementById('error-message');
        errorMessageDiv.style.display = 'none';
        errorMessageDiv.textContent = '';
    };

    // Display error message
    const displayError = (message) => {
        const errorMessageDiv = document.getElementById('error-message');
        errorMessageDiv.style.display = 'block';
        errorMessageDiv.textContent = message;
        logToConsole(`Error: ${message}`); // Log error to console
    };

    // Log messages to custom console
    const logToConsole = (message) => {
        const consoleOutput = document.getElementById('console-output');
        consoleOutput.textContent += message + '\n';
    };

    // Sign-up function
    const signUp = () => {
        const username = document.getElementById('signup-username').value.trim();
        const password = document.getElementById('signup-password').value.trim();

        if (!username || !password) {
            displayError('Please fill in all fields.');
            return;
        }

        // Hash the password
        bcrypt.hash(password, 10, (err, hashedPassword) => {
            if (err) {
                console.error(err);
                displayError('Error signing up. Please try again.');
                return;
            }

            // Check if username already exists
            database.ref('users/' + username).once('value', (snapshot) => {
                if (snapshot.exists()) {
                    displayError('Username already exists.');
                } else {
                    database.ref('users/' + username).set({
                        password: hashedPassword
                    }).then(() => {
                        logToConsole(`User signed up: ${username}`);
                        showLogin();
                    }).catch((error) => {
                        console.error(error);
                        displayError('Error signing up. Please try again.');
                    });
                }
            });
        });
    };

    // Login function
    const login = () => {
        const username = document.getElementById('login-username').value.trim();
        const password = document.getElementById('login-password').value.trim();

        if (!username || !password) {
            displayError('Please fill in all fields.');
            return;
        }

        database.ref('users/' + username).once('value', (snapshot) => {
            if (snapshot.exists()) {
                const userData = snapshot.val();
                bcrypt.compare(password, userData.password, (err, result) => {
                    if (result) {
                        logToConsole(`User logged in: ${username}`);
                        document.getElementById('password-section').style.display = 'block';
                        clearError();
                    } else {
                        displayError('Incorrect password.');
                    }
                });
            } else {
                displayError('Username does not exist.');
            }
        });
    };

    // Save password function
    const savePassword = () => {
        const site = document.getElementById('site').value.trim();
        const sitePassword = document.getElementById('site-password').value.trim();

        if (!site || !sitePassword) {
            displayError('Please fill in all fields.');
            return;
        }

        const username = document.getElementById('login-username').value.trim();
        database.ref('users/' + username + '/passwords/' + site).set({
            password: sitePassword
        }).then(() => {
            logToConsole(`Password saved for site: ${site}`);
            document.getElementById('site').value = '';
            document.getElementById('site-password').value = '';
            displaySavedPasswords(username);
        }).catch((error) => {
            console.error(error);
            displayError('Error saving password. Please try again.');
        });
    };

    // Display saved passwords
    const displaySavedPasswords = (username) => {
        const passwordList = document.getElementById('password-list');
        passwordList.innerHTML = ''; // Clear the list
        database.ref('users/' + username + '/passwords').once('value', (snapshot) => {
            if (snapshot.exists()) {
                snapshot.forEach((childSnapshot) => {
                    const siteName = childSnapshot.key;
                    const password = childSnapshot.val().password;
                    const passwordItem = document.createElement('div');
                    passwordItem.className = 'password-item';
                    passwordItem.textContent = `Site: ${siteName}, Password: ${password}`;
                    passwordList.appendChild(passwordItem);
                });
            } else {
                passwordList.textContent = 'No saved passwords.';
            }
        });
    };

    // Show custom console
    const showConsole = () => {
        document.getElementById('custom-console').style.display = 'block';
    };

    // Close custom console
    const closeConsole = () => {
        document.getElementById('custom-console').style.display = 'none';
    };
</script>

</body>
</html>
